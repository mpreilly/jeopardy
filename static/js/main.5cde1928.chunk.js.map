{"version":3,"sources":["components/TopTile.js","Firebase.js","components/GameBoard.js","App.js","serviceWorker.js","components/BuzzerScreen.js","components/AnswerScreen.js","index.js"],"names":["TopTile","react_default","a","createElement","Col","style","backgroundColor","minHeight","margin","padding","textAlign","fontFamily","fontWeight","color","this","props","category","toUpperCase","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","GameBoard","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","questionChosen","round","value","console","log","state","game","questionsDone","size","setState","currentRound","currentQuestion","prevState","add","questionInProgress","firstBuzz","gameref","set","currentAnswer","buzzer","questionAnswered","player","defineProperty","parseInt","substring","concat","questionAnsweredWrong","questionNotAnswered","readyForBuzz","merge","Set","player1","player2","player3","db","firestore","collection","doc","_this2","date","get","then","exists","data","catch","error","onSnapshot","_this3","hasOwnProperty","className","onClick","finalJeopardy","values","Container","marginTop","Row","display","flexWrap","marginBottom","keys","map","catName","components_TopTile","has","App","dates","querySnapshot","forEach","id","push","components_GameBoard","Boolean","window","location","hostname","match","BuzzerScreen","buzzIn","playerNumber","ready","buzzerClass","AnswerScreen","question","answer","ReactDOM","render","react_router_dom","react_router","path","exact","component","components_BuzzerScreen","assign","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.5cde1928.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Col } from \"react-bootstrap\";\n\nclass TopTile extends Component {\n\n    render () {\n        return (\n            <Col >\n                {/* <h3 style={{color: \"#000000\"}}>Hello</h3> */}\n                <div style={\n                        {backgroundColor: \"#060CE9\",\n                        minHeight: \"5.5em\",\n                        margin: \"0em -0.5em\",\n                        padding: \"0.5em 1em\",\n                        textAlign: \"center\",\n                        // lineHeight: \"5em\",\n                        fontFamily: \"Arial\",\n                        fontWeight: \"bold\",\n                        color: \"white\"}}>\n                    {this.props.category ? this.props.category.toUpperCase() : \"[No category]\"}\n                </div> \n            </Col> \n        )\n    }\n}\n\nexport default TopTile;","import firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDJ9M458uPIFu7jejJELsrplsE7P-NA9rs\",\n    authDomain: \"jeopardy-4c8d6.firebaseapp.com\",\n    databaseURL: \"https://jeopardy-4c8d6.firebaseio.com\",\n    projectId: \"jeopardy-4c8d6\",\n    storageBucket: \"jeopardy-4c8d6.appspot.com\",\n    messagingSenderId: \"247329087579\",\n    appId: \"1:247329087579:web:d53ecdfaef38f4c5aedf7e\",\n    measurementId: \"G-C559BQVVHV\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Component } from 'react';\nimport TopTile from \"./TopTile\";\nimport '../style/style.css';\nimport { Container , Row, Col } from \"react-bootstrap\";\n// import socketIOClient from \"socket.io-client\";\nimport firebase from '../Firebase'\n\nclass GameBoard extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            game: {},\n            questionsDone: new Set([]),\n            questionInProgress: {},\n            player1: 0,\n            player2: 0,\n            player3: 0,\n            currentRound: \"jeopardy\",\n            firstBuzz: \"\"\n        };\n\n        // this.socket = \"\"\n        this.db = firebase.firestore();\n        this.gameref = this.db.collection(\"currentGames\").doc(\"1\");\n    }\n\n    componentDidMount() {\n        // const url = '/games/' + this.props.date;\n        // fetch(url, {method: 'GET'})\n        //     .then(data => data.json())\n        //     .then(json => this.setState({game: json}))\n        // var docRef = this.db.collection(\"games\").doc(this.props.date);\n        var dataref = this.db.collection(\"games\").doc(this.props.date);\n        dataref.get().then(function(doc) {\n            if (doc.exists) {\n                // console.log(\"Document data:\", doc.data());\n                return doc.data();\n            } else {\n                // doc.data() will be undefined in this case\n                console.log(\"No such document!\");\n            }\n        }).then((data) => this.setState({game: data})).catch(function(error) {\n            console.log(\"Error getting document:\", error);\n        });\n\n        this.gameref.onSnapshot((doc) => {\n            if (!doc.exists) {\n                // console.log(\"Document data:\", doc.data());\n                return;\n            }\n            var data = doc.data()\n            if (data['buzzer'] === \"1\" || data['buzzer'] === \"2\" || data['buzzer'] === \"3\") {\n                this.setState({ firstBuzz: data['buzzer'] })\n            }\n        });\n    }\n\n    questionChosen = (round, category, value) => {\n        console.log('Chosen: ' + category + \" for \" + value)\n        console.log(this.state.game[round][category][value][\"question\"])\n        console.log(\"Answer: \" + this.state.game[round][category][value][\"answer\"])\n\n        if (this.state.questionsDone.size === 29) {\n            console.log(\"jeopardy round over\")\n            this.setState({currentRound: \"doubleJeopardy\"})\n        } else if (this.state.questionsDone.size === 59) {\n            console.log(\"double jeopardy round over\")\n            this.setState({currentRound: \"finalJeopardy\"})\n        }\n\n        const currentQuestion = { round: round,\n                                category: category,\n                                value: value }\n\n        this.setState(prevState => ({questionsDone: prevState.questionsDone.add(category + value),\n                                    questionInProgress: currentQuestion,\n                                    firstBuzz: \"\" }))\n\n        // fetch('/answer', {\n        //     method: 'POST',\n        //     body: JSON.stringify({ round: round,\n        //         category: category,\n        //         value: value })\n        // })\n\n        // this.socket.emit('new question', { question: this.state.game[round][category][value][\"question\"],\n        //                                     answer: this.state.game[round][category][value][\"answer\"]});\n\n        this.gameref.set({currentQuestion: this.state.game[round][category][value][\"question\"],\n                        currentAnswer: this.state.game[round][category][value][\"answer\"],\n                        buzzer: \"closed\"})\n\n    }\n\n    questionAnswered = (value, player) => {\n        this.setState(prevState => ({questionInProgress: {},\n                                    [player]: prevState[player] + parseInt(value.substring(1)) }))\n        console.log(`${player} gets ${value}!`)\n    }\n\n    questionAnsweredWrong = (value, player) => {\n        this.setState(prevState => ({[player]: prevState[player] - parseInt(value.substring(1)) }))\n        console.log(`${player} loses ${value}!`)\n    }\n\n    questionNotAnswered = () => {\n        this.setState(prevState => ({questionInProgress: {}}))\n    }\n\n    readyForBuzz = () => {\n        // this.socket.emit('reset buzzer', {});\n        this.setState({firstBuzz: \"\"})\n        this.gameref.set({\n            buzzer: \"open\"\n        }, { merge: true });\n    }\n\n    render () {\n        // if (!this.state.game.hasOwnProperty(\"jeopardy\")) {\n        //     fetch('localhost:3001/dates')\n        //     .then((res) => console.log())\n        //     return ( \n        //         <div>please choose game.</div>\n        //     )\n        // }\n        if (!this.state.game.hasOwnProperty(\"jeopardy\")) {\n            return ( <div> loading game </div>)\n        }\n\n        if (this.state.questionInProgress.hasOwnProperty(\"round\")) {\n            return ( \n                <div className=\"question-screen\">\n                    <div >\n                        {this.state.game[this.state.questionInProgress.round][this.state.questionInProgress.category][this.state.questionInProgress.value][\"question\"]} \n                    </div>\n                    <div className=\"first-buzz\">\n                        {this.state.firstBuzz ? `Player ${this.state.firstBuzz}!` : null}\n                    </div>\n                    <div >\n                        <button className=\"player-button\" onClick={() => this.questionAnswered(this.state.questionInProgress.value, \"player1\")}>Player 1 Right</button>\n                        <button className=\"player-button\" onClick={() => this.questionAnswered(this.state.questionInProgress.value, \"player2\")}>Player 2 Right</button>\n                        <button className=\"player-button\" onClick={() => this.questionAnswered(this.state.questionInProgress.value, \"player3\")}>Player 3 Right</button>\n                    </div>\n\n                    <div>\n                        <button className=\"player-button2\" onClick={() => this.questionAnsweredWrong(this.state.questionInProgress.value, \"player1\")}>Player 1 Wrong</button>\n                        <button className=\"player-button2\" onClick={() => this.questionAnsweredWrong(this.state.questionInProgress.value, \"player2\")}>Player 2 Wrong</button>\n                        <button className=\"player-button2\" onClick={() => this.questionAnsweredWrong(this.state.questionInProgress.value, \"player3\")}>Player 3 Wrong</button>\n                    </div>\n                    <div>\n                        <button className=\"player-button2\" onClick={() => this.questionNotAnswered()}>No Answer</button>\n                    </div>\n                    <div>\n                        <button className=\"player-button2\" onClick={() => this.readyForBuzz()}>Ready For Buzz</button>\n                    </div>\n                </div>\n            )\n        }\n\n        if (this.state.currentRound === 'finalJeopardy') {\n            return (\n                <div className=\"question-screen\">\n                    <div>\n                        {this.state.game.finalJeopardy[\"category\"]}\n                    </div>\n                    <div>\n                        <button className=\"player-button\" onClick={() => this.setState({currentRound: 'finalJeopardyQuestion'})}>Continue</button>\n                    </div>\n                </div>\n            )\n        } else if (this.state.currentRound === 'finalJeopardyQuestion') {\n            console.log(\"Answer: \" + this.state.game.finalJeopardy[\"answer\"])\n            return (\n                <div className=\"question-screen\">\n                        <div>\n                            {this.state.game.finalJeopardy[\"question\"]}\n                        </div>\n                        <div>\n                            <button className=\"player-button\" onClick={() => this.setState({currentRound: 'finalJeopardyAnswer'})}>Show Answer</button>\n                        </div>\n                </div>\n            )\n        } else if (this.state.currentRound === 'finalJeopardyAnswer') {\n            return (\n                <div className=\"question-screen\">\n                        <div>\n                            {this.state.game.finalJeopardy[\"answer\"]}\n                        </div>\n                </div>\n            )\n        }\n\n        var values = [];\n        if (this.state.currentRound === 'jeopardy') {\n            values = [\"$200\", \"$400\", \"$600\", \"$800\", \"$1000\"]\n        } else if (this.state.currentRound === 'doubleJeopardy') {\n            values = [\"$400\", \"$800\", \"$1200\", \"$1600\", \"$2000\"]\n        }\n\n        return (\n            <Container style={{backgroundColor: \"gray\", marginTop: \"0.5em\", padding: \"0.5em\"}}>\n                <Row style={{display: \"flex\", flexWrap: \"wrap\", minHeight: \"10em\", marginBottom:\"-3em\"}}>\n                    {Object.keys(this.state.game[this.state.currentRound]).map((catName) => {\n                        return (<TopTile category={catName} />)\n                    })}\n                </Row>\n                {\n                    values.map((value) => {\n                        return (\n                            <Row>\n                                {Object.keys(this.state.game[this.state.currentRound]).map((catName) => {\n                                    return (\n                                        <Col>\n                                            <button \n                                                className=\"question-tile\" \n                                                onClick={() => this.questionChosen(this.state.currentRound, catName, value)}>\n                                                {this.state.questionsDone.has(catName + value) ? \"\" : value}\n                                            </button>\n                                        </Col>\n                                    )\n                                })}\n                            </Row>)\n                })}\n                <Row className=\"scores\">\n                    <Col>Player 1: ${this.state.player1}</Col>\n                    <Col>Player 2: ${this.state.player2}</Col>\n                    <Col>Player 3: ${this.state.player3}</Col>\n                </Row>\n\n            </Container>\n        )\n    }\n}\n\nexport default GameBoard;","import React, { Component } from 'react';\nimport './App.css';\nimport GameBoard from './components/GameBoard'\nimport firebase from './Firebase'\n\n\nclass App extends Component {\n  // const categories = ['Potent Potables', 'Letters That Begin With \"G\"',  'Who Reads', 'Let It Snow', 'State Your Name', 'Famous Oprahs']\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      date: \"\",\n      dates: []\n    }\n  }\n\n  componentDidMount () {\n    var db = firebase.firestore();\n    var dates = []\n    db.collection(\"games\").get().then((querySnapshot) => {\n      querySnapshot.forEach((doc) => {\n        console.log(`${doc.id} => ${doc.data()}`);\n        dates.push(doc.id)\n      });\n      return dates\n    }).then((dates) => this.setState({dates: dates}))\n\n    // fetch(\"/dates\", {method: 'GET'})\n    //   .then(data => data.json())\n    //   .then(json => this.setState({dates: json}))\n  }\n\n  render () {\n    if (this.state.date === \"\") {\n      return (\n        <div>\n          <p>please select date</p>\n          {this.state.dates.map((date) => {\n            return (\n              <button onClick={() => {this.setState({date: date})}}>{date}</button>\n            )\n          })}\n        </div>\n      )\n    } else {\n      return (\n        <GameBoard date={this.state.date}/>\n      );\n    }\n    \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\n// import socketIOClient from 'socket.io-client';\nimport firebase from '../Firebase'\n\nclass BuzzerScreen extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = { ready: false }\n\n        // this.socket = \"\"\n        this.db = firebase.firestore();\n        this.gameref = this.db.collection(\"currentGames\").doc(\"1\");\n    }\n\n    componentDidMount() {\n        // this.socket = socketIOClient.connect('http://192.168.86.37:3000/buzzer');\n        // this.socket = socketIOClient.connect('localhost:3000/buzzer');\n        // this.socket.on(\"buzzer on\", data => this.setState({ready: true}))\n        // this.socket.on(\"buzzer off\", data => this.setState({ready: false}))\n        this.gameref.onSnapshot((doc) => {\n            var data = doc.data()\n            if (data['buzzer'] === \"open\") {\n                this.setState({ ready: true })\n            } else {\n                this.setState({ ready: false })\n            }\n        });\n    }\n\n    buzzIn = (playerNumber) => {\n        // this.socket.emit(\"buzz\", {player: playerNumber})\n        if (this.state.ready) {\n            this.gameref.set({\n                buzzer: playerNumber\n            }, { merge: true });\n        }\n    }\n\n    render () {\n        const buzzerClass = this.state.ready ? \"buzzer-button\" : \"buzzer-inactive\"\n        return (\n            <div>\n                <h2>Buzzer for player {this.props.player}</h2>\n                <button className={buzzerClass} onClick={() => this.buzzIn(this.props.player)}>\n                    {this.state.ready ? \"buzz\" : \"not yet\"}\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default BuzzerScreen;","import React, { Component } from 'react';\n// import socketIOClient from 'socket.io-client';\nimport firebase from '../Firebase'\n\n\nclass AnswerScreen extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            question: \"\",\n            answer: \"\"\n        }\n\n        // this.socket = \"\"\n        this.db = firebase.firestore();\n        this.gameref = this.db.collection(\"currentGames\").doc(\"1\");\n    }\n\n    componentDidMount() {\n        // const socket = socketIOClient.connect('http://192.168.86.37:3000/trebek');\n        // const socket = socketIOClient.connect('localhost:3000/trebek');\n        // socket.on(\"new question\", data => this.setState(data))\n        this.gameref.onSnapshot((doc) => {\n            var data = doc.data()\n            this.setState({question: data['currentQuestion'], answer: data['currentAnswer']})\n        });\n    }\n\n    render () {\n        return (\n            <div>\n                <h3>{this.state.question}</h3>\n                <h2>{this.state.answer}</h2>\n            </div>\n        )\n    }\n}\n\nexport default AnswerScreen;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport BuzzerScreen from './components/BuzzerScreen';\nimport AnswerScreen from './components/AnswerScreen';\n\n\nReactDOM.render(\n    <Router>\n        <Route path=\"/\" exact component={App}/>\n        <Route path=\"/buzzer1\" exact render={(props) => <BuzzerScreen {...props} player=\"1\" />}/>\n        <Route path=\"/buzzer2\" exact render={(props) => <BuzzerScreen {...props} player=\"2\" />}/>\n        <Route path=\"/buzzer3\" exact render={(props) => <BuzzerScreen {...props} player=\"3\" />}/>\n        <Route path=\"/trebek\" exact component={AnswerScreen}/>\n    </Router>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}