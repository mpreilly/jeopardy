{"version":3,"sources":["serviceWorker.js","components/TopTile.js","Firebase.js","components/GameBoard.js","App.js","components/BuzzerScreen.js","components/AnswerScreen.js","ScreenChoice.js","index.js"],"names":["Boolean","window","location","hostname","match","TopTile","react_default","a","createElement","Col","style","backgroundColor","minHeight","margin","padding","textAlign","fontFamily","fontWeight","color","this","props","category","toUpperCase","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","GameBoard","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","questionChosen","round","value","console","log","state","game","questionsDone","size","setState","currentRound","currentQuestion","prevState","add","questionInProgress","firstBuzz","gameref","set","currentAnswer","buzzer","questionAnswered","player","defineProperty","parseInt","substring","concat","questionAnsweredWrong","questionNotAnswered","readyForBuzz","merge","Set","player1","player2","player3","db","firestore","collection","doc","gameCode","_this2","date","get","then","exists","data","catch","error","onSnapshot","_this3","hasOwnProperty","className","onClick","finalJeopardy","values","Container","marginTop","Row","display","flexWrap","marginBottom","keys","map","catName","index","components_TopTile","key","index1","index2","has","App","dates","querySnapshot","forEach","push","id","components_GameBoard","BuzzerScreen","buzzIn","playerNumber","ready","buzzerClass","AnswerScreen","question","answer","ScreenChoice","handleChange","event","target","handleSubmit","gameCodeSet","alert","preventDefault","makeCode","choices","code","i","charAt","Math","floor","random","length","checkGameUnique","createGame","unique","choice","src_App_0","components_BuzzerScreen","components_AnswerScreen","onSubmit","type","onChange","ReactDOM","render","src_ScreenChoice","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.26a8b498.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport { Col } from \"react-bootstrap\";\n\nclass TopTile extends Component {\n\n    render () {\n        return (\n            <Col >\n                {/* <h3 style={{color: \"#000000\"}}>Hello</h3> */}\n                <div style={\n                        {backgroundColor: \"#060CE9\",\n                        minHeight: \"5.5em\",\n                        margin: \"0em -0.5em\",\n                        padding: \"0.5em 1em\",\n                        textAlign: \"center\",\n                        // lineHeight: \"5em\",\n                        fontFamily: \"Arial\",\n                        fontWeight: \"bold\",\n                        color: \"white\"}}>\n                    {this.props.category ? this.props.category.toUpperCase() : \"[No category]\"}\n                </div> \n            </Col> \n        )\n    }\n}\n\nexport default TopTile;","import firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDJ9M458uPIFu7jejJELsrplsE7P-NA9rs\",\n    authDomain: \"jeopardy-4c8d6.firebaseapp.com\",\n    databaseURL: \"https://jeopardy-4c8d6.firebaseio.com\",\n    projectId: \"jeopardy-4c8d6\",\n    storageBucket: \"jeopardy-4c8d6.appspot.com\",\n    messagingSenderId: \"247329087579\",\n    appId: \"1:247329087579:web:170c2ce39ef16464aedf7e\",\n    measurementId: \"G-W0BN5K0KPS\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Component } from 'react';\nimport TopTile from \"./TopTile\";\nimport '../style/style.css';\nimport { Container , Row, Col } from \"react-bootstrap\";\n// import socketIOClient from \"socket.io-client\";\nimport firebase from '../Firebase'\n\nclass GameBoard extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            game: {},\n            questionsDone: new Set([]),\n            questionInProgress: {},\n            player1: 0,\n            player2: 0,\n            player3: 0,\n            currentRound: \"jeopardy\",\n            firstBuzz: \"\"\n        };\n\n        // this.socket = \"\"\n        this.db = firebase.firestore();\n        this.gameref = this.db.collection(\"currentGames\").doc(this.props.gameCode);\n    }\n\n    componentDidMount() {\n        // const url = '/games/' + this.props.date;\n        // fetch(url, {method: 'GET'})\n        //     .then(data => data.json())\n        //     .then(json => this.setState({game: json}))\n        // var docRef = this.db.collection(\"games\").doc(this.props.date);\n        var dataref = this.db.collection(\"games\").doc(this.props.date);\n        dataref.get().then(function(doc) {\n            if (doc.exists) {\n                // console.log(\"Document data:\", doc.data());\n                return doc.data();\n            } else {\n                // doc.data() will be undefined in this case\n                console.log(\"No such document!\");\n            }\n        }).then((data) => this.setState({game: data})).catch(function(error) {\n            console.log(\"Error getting document:\", error);\n        });\n\n        this.gameref.onSnapshot((doc) => {\n            if (!doc.exists) {\n                // console.log(\"Document data:\", doc.data());\n                return;\n            }\n            var data = doc.data()\n            if (data['buzzer'] === \"1\" || data['buzzer'] === \"2\" || data['buzzer'] === \"3\") {\n                this.setState({ firstBuzz: data['buzzer'] })\n            }\n        });\n    }\n\n    questionChosen = (round, category, value) => {\n        console.log('Chosen: ' + category + \" for \" + value)\n        console.log(this.state.game[round][category][value][\"question\"])\n        console.log(\"Answer: \" + this.state.game[round][category][value][\"answer\"])\n\n        if (this.state.questionsDone.size === 29) {\n            console.log(\"jeopardy round over\")\n            this.setState({currentRound: \"doubleJeopardy\"})\n        } else if (this.state.questionsDone.size === 59) {\n            console.log(\"double jeopardy round over\")\n            this.setState({currentRound: \"finalJeopardy\"})\n        }\n\n        const currentQuestion = { round: round,\n                                category: category,\n                                value: value }\n\n        this.setState(prevState => ({questionsDone: prevState.questionsDone.add(category + value),\n                                    questionInProgress: currentQuestion,\n                                    firstBuzz: \"\" }))\n\n        // fetch('/answer', {\n        //     method: 'POST',\n        //     body: JSON.stringify({ round: round,\n        //         category: category,\n        //         value: value })\n        // })\n\n        // this.socket.emit('new question', { question: this.state.game[round][category][value][\"question\"],\n        //                                     answer: this.state.game[round][category][value][\"answer\"]});\n\n        this.gameref.set({currentQuestion: this.state.game[round][category][value][\"question\"],\n                        currentAnswer: this.state.game[round][category][value][\"answer\"],\n                        buzzer: \"closed\"})\n\n    }\n\n    questionAnswered = (value, player) => {\n        this.setState(prevState => ({questionInProgress: {},\n                                    [player]: prevState[player] + parseInt(value.substring(1)) }))\n        console.log(`${player} gets ${value}!`)\n    }\n\n    questionAnsweredWrong = (value, player) => {\n        this.setState(prevState => ({[player]: prevState[player] - parseInt(value.substring(1)) }))\n        console.log(`${player} loses ${value}!`)\n    }\n\n    questionNotAnswered = () => {\n        this.setState(prevState => ({questionInProgress: {}}))\n    }\n\n    readyForBuzz = () => {\n        // this.socket.emit('reset buzzer', {});\n        this.setState({firstBuzz: \"\"})\n        this.gameref.set({\n            buzzer: \"open\"\n        }, { merge: true });\n    }\n\n    render () {\n        // if (!this.state.game.hasOwnProperty(\"jeopardy\")) {\n        //     fetch('localhost:3001/dates')\n        //     .then((res) => console.log())\n        //     return ( \n        //         <div>please choose game.</div>\n        //     )\n        // }\n        if (!this.state.game.hasOwnProperty(\"jeopardy\")) {\n            return ( <div> loading game </div>)\n        }\n\n        if (this.state.questionInProgress.hasOwnProperty(\"round\")) {\n            return ( \n                <div className=\"question-screen\">\n                    <div >\n                        {this.state.game[this.state.questionInProgress.round][this.state.questionInProgress.category][this.state.questionInProgress.value][\"question\"]} \n                    </div>\n                    <div className=\"first-buzz\">\n                        {this.state.firstBuzz ? `Player ${this.state.firstBuzz}!` : null}\n                    </div>\n                    <div >\n                        <button className=\"player-button\" onClick={() => this.questionAnswered(this.state.questionInProgress.value, \"player1\")}>Player 1 Right</button>\n                        <button className=\"player-button\" onClick={() => this.questionAnswered(this.state.questionInProgress.value, \"player2\")}>Player 2 Right</button>\n                        <button className=\"player-button\" onClick={() => this.questionAnswered(this.state.questionInProgress.value, \"player3\")}>Player 3 Right</button>\n                    </div>\n\n                    <div>\n                        <button className=\"player-button2\" onClick={() => this.questionAnsweredWrong(this.state.questionInProgress.value, \"player1\")}>Player 1 Wrong</button>\n                        <button className=\"player-button2\" onClick={() => this.questionAnsweredWrong(this.state.questionInProgress.value, \"player2\")}>Player 2 Wrong</button>\n                        <button className=\"player-button2\" onClick={() => this.questionAnsweredWrong(this.state.questionInProgress.value, \"player3\")}>Player 3 Wrong</button>\n                    </div>\n                    <div>\n                        <button className=\"player-button2\" onClick={() => this.questionNotAnswered()}>No Answer</button>\n                    </div>\n                    <div>\n                        <button className=\"player-button2\" onClick={() => this.readyForBuzz()}>Ready For Buzz</button>\n                    </div>\n                </div>\n            )\n        }\n\n        if (this.state.currentRound === 'finalJeopardy') {\n            return (\n                <div className=\"question-screen\">\n                    <div>\n                        {this.state.game.finalJeopardy[\"category\"]}\n                    </div>\n                    <div>\n                        <button className=\"player-button\" onClick={() => this.setState({currentRound: 'finalJeopardyQuestion'})}>Continue</button>\n                    </div>\n                </div>\n            )\n        } else if (this.state.currentRound === 'finalJeopardyQuestion') {\n            console.log(\"Answer: \" + this.state.game.finalJeopardy[\"answer\"])\n            return (\n                <div className=\"question-screen\">\n                        <div>\n                            {this.state.game.finalJeopardy[\"question\"]}\n                        </div>\n                        <div>\n                            <button className=\"player-button\" onClick={() => this.setState({currentRound: 'finalJeopardyAnswer'})}>Show Answer</button>\n                        </div>\n                </div>\n            )\n        } else if (this.state.currentRound === 'finalJeopardyAnswer') {\n            return (\n                <div className=\"question-screen\">\n                        <div>\n                            {this.state.game.finalJeopardy[\"answer\"]}\n                        </div>\n                </div>\n            )\n        }\n\n        var values = [];\n        if (this.state.currentRound === 'jeopardy') {\n            values = [\"$200\", \"$400\", \"$600\", \"$800\", \"$1000\"]\n        } else if (this.state.currentRound === 'doubleJeopardy') {\n            values = [\"$400\", \"$800\", \"$1200\", \"$1600\", \"$2000\"]\n        }\n\n        return (\n            <Container style={{backgroundColor: \"gray\", marginTop: \"0.5em\", padding: \"0.5em\"}}>\n                <Row style={{display: \"flex\", flexWrap: \"wrap\", minHeight: \"10em\", marginBottom:\"-3em\"}}>\n                    {Object.keys(this.state.game[this.state.currentRound]).map((catName, index) => {\n                        return (<TopTile category={catName} key={index} />)\n                    })}\n                </Row>\n                {\n                    values.map((value, index1) => {\n                        return (\n                            <Row key={index1}>\n                                {Object.keys(this.state.game[this.state.currentRound]).map((catName, index2) => {\n                                    return (\n                                        <Col key={index2} >\n                                            <button \n                                                className=\"question-tile\" \n                                                onClick={() => this.questionChosen(this.state.currentRound, catName, value)}>\n                                                {this.state.questionsDone.has(catName + value) ? \"\" : value}\n                                            </button>\n                                        </Col>\n                                    )\n                                })}\n                            </Row>)\n                })}\n                <Row className=\"scores\">\n                    <Col>Player 1: ${this.state.player1}</Col>\n                    <Col>Player 2: ${this.state.player2}</Col>\n                    <Col>Player 3: ${this.state.player3}</Col>\n                </Row>\n                <Row className=\"scores\">\n                    <Col>\n                        <h2>Game Code: {this.props.gameCode}</h2>\n                    </Col>\n                </Row>\n\n            </Container>\n        )\n    }\n}\n\nexport default GameBoard;","import React, { Component } from 'react';\nimport './App.css';\nimport GameBoard from './components/GameBoard'\nimport firebase from './Firebase'\n\n\nclass App extends Component {\n  // const categories = ['Potent Potables', 'Letters That Begin With \"G\"',  'Who Reads', 'Let It Snow', 'State Your Name', 'Famous Oprahs']\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      date: \"\",\n      dates: []\n    }\n  }\n\n  componentDidMount () {\n    var db = firebase.firestore();\n    var dates = []\n    db.collection(\"games\").get().then((querySnapshot) => {\n      querySnapshot.forEach((doc) => {\n        dates.push(doc.id)\n      });\n      return dates\n    }).then((dates) => this.setState({dates: dates}))\n\n    // fetch(\"/dates\", {method: 'GET'})\n    //   .then(data => data.json())\n    //   .then(json => this.setState({dates: json}))\n  }\n\n  render () {\n    if (this.state.date === \"\") {\n      return (\n        <div>\n          <p>please select date</p>\n          {this.state.dates.map((date, index) => {\n            return (\n              <button key={index} onClick={() => {this.setState({date: date})}}>{date}</button>\n            )\n          })}\n        </div>\n      )\n    } else {\n      return (\n        <GameBoard date={this.state.date} gameCode={this.props.gameCode} />\n      );\n    }\n    \n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\n// import socketIOClient from 'socket.io-client';\nimport firebase from '../Firebase'\n\nclass BuzzerScreen extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = { ready: false }\n\n        // this.socket = \"\"\n        this.db = firebase.firestore();\n        this.gameref = this.db.collection(\"currentGames\").doc(this.props.gameCode);\n    }\n\n    componentDidMount() {\n        // this.socket = socketIOClient.connect('http://192.168.86.37:3000/buzzer');\n        // this.socket = socketIOClient.connect('localhost:3000/buzzer');\n        // this.socket.on(\"buzzer on\", data => this.setState({ready: true}))\n        // this.socket.on(\"buzzer off\", data => this.setState({ready: false}))\n        this.gameref.onSnapshot((doc) => {\n            var data = doc.data()\n            if (data['buzzer'] === \"open\") {\n                this.setState({ ready: true })\n            } else {\n                this.setState({ ready: false })\n            }\n        });\n    }\n\n    buzzIn = (playerNumber) => {\n        // this.socket.emit(\"buzz\", {player: playerNumber})\n        if (this.state.ready) {\n            this.gameref.set({\n                buzzer: playerNumber\n            }, { merge: true });\n        }\n    }\n\n    render () {\n        const buzzerClass = this.state.ready ? \"buzzer-button\" : \"buzzer-inactive\"\n        return (\n            <div>\n                <h2>Buzzer for player {this.props.player}</h2>\n                <button className={buzzerClass} onClick={() => this.buzzIn(this.props.player)}>\n                    {this.state.ready ? \"buzz\" : \"not yet\"}\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default BuzzerScreen;","import React, { Component } from 'react';\n// import socketIOClient from 'socket.io-client';\nimport firebase from '../Firebase'\n\n\nclass AnswerScreen extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            question: \"\",\n            answer: \"\"\n        }\n\n        // this.socket = \"\"\n        this.db = firebase.firestore();\n        this.gameref = this.db.collection(\"currentGames\").doc(this.props.gameCode);\n    }\n\n    componentDidMount() {\n        // const socket = socketIOClient.connect('http://192.168.86.37:3000/trebek');\n        // const socket = socketIOClient.connect('localhost:3000/trebek');\n        // socket.on(\"new question\", data => this.setState(data))\n        this.gameref.onSnapshot((doc) => {\n            var data = doc.data()\n            this.setState({question: data['currentQuestion'], answer: data['currentAnswer']})\n        });\n    }\n\n    render () {\n        return (\n            <div>\n                <h3>{this.state.question}</h3>\n                <h2>{this.state.answer}</h2>\n            </div>\n        )\n    }\n}\n\nexport default AnswerScreen;","import React, { Component } from 'react';\nimport App from './App';\nimport BuzzerScreen from './components/BuzzerScreen';\nimport AnswerScreen from './components/AnswerScreen';\nimport firebase from './Firebase'\n\n\nclass ScreenChoice extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { gameCode: \"\",\n                    gameCodeSet: false, \n                  choice: \"\" }\n    \n    this.db = firebase.firestore();\n  }\n\n  handleChange = (event) => {\n    this.setState({ gameCode: event.target.value });\n  }\n\n  handleSubmit = (event) => {\n    let gameref = this.db.collection(\"currentGames\").doc(this.state.gameCode);\n    gameref.get().then((doc) => {\n      if (!doc.exists) {\n        alert(\"game doesn't exist! try again or generate new game\")\n      } else {\n        this.setState({ gameCodeSet: true })\n      }\n    });\n    event.preventDefault();\n    \n  }\n\n  makeCode = () => {\n    let choices = \"ABCDEFGHIJKLMNPQRSTUVWXYZ123456789\";\n    let code = \"\";\n    for (let i = 0; i < 4; i++) {\n      code += choices.charAt(Math.floor(Math.random() * choices.length));\n    }\n    return code;\n  }\n\n  checkGameUnique = (code) => {\n    let gameref = this.db.collection(\"currentGames\").doc(code);\n    return gameref.get().then((doc) => {\n      if (!doc.exists) {\n        // this.setState({ gameCodeSet: true, gameCode: code });\n        console.log(\"within function: returning true\")\n        return true;\n      }\n    });\n  }\n\n  createGame = () => {\n    let code = this.makeCode();\n    this.checkGameUnique(code).then(unique => {\n      if (unique) {\n        let gameref = this.db.collection(\"currentGames\").doc(code);\n        gameref.set({currentQuestion: \"\",\n                        currentAnswer: \"\",\n                        buzzer: \"closed\"}\n        ).then(() => {this.setState({ gameCode: code, gameCodeSet: true })})  \n      } else {\n        this.createGame()   // i know, might not be optimal. Getting around putting async func in loop\n      }\n    })\n  }\n\n  render () {\n    if (!this.state.gameCodeSet) {\n      return (\n        <div>\n          <h1>Enter Game Code or Start New Game</h1>\n          <form onSubmit={this.handleSubmit}>\n            <label>\n              Game Code:\n              <input type=\"text\" value={this.state.gameCode} onChange={this.handleChange} />\n            </label>\n            <input type=\"submit\" value=\"Submit\" />\n            {/* <button onClick={() => {this.setState({gameCodeSet: true})}}>Go</button> */}\n          </form>\n          <button onClick={() => this.createGame()}>Create New Game</button>\n        </div>\n      )\n    }\n\n    if (this.state.choice === \"\") {\n      return (\n        <div>\n          <h1>Choose Screen</h1>\n          <button onClick={() => {this.setState({choice: \"gameboard\"})}}>Game Board</button>\n          <button onClick={() => {this.setState({choice: \"buzzer1\"})}}>Player 1</button>\n          <button onClick={() => {this.setState({choice: \"buzzer2\"})}}>Player 2</button>\n          <button onClick={() => {this.setState({choice: \"buzzer3\"})}}>Player 3</button>\n          <button onClick={() => {this.setState({choice: \"trebek\"})}}>Trebek</button>\n        </div>\n      )\n    } else if (this.state.choice === \"gameboard\") {\n      return(<App gameCode={this.state.gameCode} />)\n    } else if (this.state.choice === \"buzzer1\") {\n      return(<BuzzerScreen player=\"1\" gameCode={this.state.gameCode} />)\n    } else if (this.state.choice === \"buzzer2\") {\n      return(<BuzzerScreen player=\"2\" gameCode={this.state.gameCode} />)\n    } else if (this.state.choice === \"buzzer3\") {\n      return(<BuzzerScreen player=\"3\" gameCode={this.state.gameCode} />)\n    } else if (this.state.choice === \"trebek\") {\n      return(<AnswerScreen gameCode={this.state.gameCode} />)\n    }\n  }\n}\n\nexport default ScreenChoice;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// import { BrowserRouter as Router, Route } from 'react-router-dom';\n// import BuzzerScreen from './components/BuzzerScreen';\n// import AnswerScreen from './components/AnswerScreen';\n\nimport ScreenChoice from './ScreenChoice'\n\n\nReactDOM.render(\n    // <Router>\n    //     <Route path=\"/\" exact component={App}/>\n    //     <Route path=\"/buzzer1\" exact render={(props) => <BuzzerScreen {...props} player=\"1\" />}/>\n    //     <Route path=\"/buzzer2\" exact render={(props) => <BuzzerScreen {...props} player=\"2\" />}/>\n    //     <Route path=\"/buzzer3\" exact render={(props) => <BuzzerScreen {...props} player=\"3\" />}/>\n    //     <Route path=\"/trebek\" exact component={AnswerScreen}/>\n    // </Router>\n    <ScreenChoice />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}